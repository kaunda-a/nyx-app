name: Build and Test Nyx App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-server:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Create virtual environment
      run: |
        cd server
        python -m venv base
        source base/bin/activate
        python -m pip install --upgrade pip

    - name: Install dependencies
      run: |
        cd server
        source base/bin/activate
        pip install -r requirements.txt

    - name: Create test environment file
      run: |
        cd server
        cp .env.example .env
        # Set test values using correct placeholders from .env.example
        sed -i 's|https://your-project.supabase.co|https://placeholder.supabase.co|g' .env
        sed -i 's|your_supabase_anon_key_here|placeholder_service_role_key_for_testing_purposes_only|g' .env
        sed -i 's|your_very_secure_jwt_secret_here_at_least_32_characters|test_jwt_secret_at_least_32_characters_long_for_github_build_testing|g' .env
        # Debug: Show what was actually set
        echo "=== DEBUG: .env file contents ==="
        cat .env
        echo "================================="

    - name: Test server startup
      run: |
        cd server
        source base/bin/activate
        # Run server with timeout and capture exit code
        echo "Starting server test..."
        timeout 30s python main.py || exit_code=$?
        echo "Server test completed with exit code: $exit_code"
        # Check if server started successfully (exit code 124 means timeout, which is expected)
        if [ "$exit_code" = "124" ]; then
          echo "✅ Server started successfully and was terminated by timeout"
          exit 0
        elif [ "$exit_code" = "0" ] || [ -z "$exit_code" ]; then
          echo "✅ Server started and stopped gracefully"
          exit 0
        else
          echo "❌ Server failed to start (exit code: $exit_code)"
          exit 1
        fi

  test-client:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: |
        cd client
        pnpm install

    - name: Build client
      run: |
        cd client
        pnpm build

    - name: Test client build
      run: |
        cd client
        # Check if build artifacts exist
        if [ -d "dist" ]; then
          echo "Client build successful"
        else
          echo "Client build failed"
          exit 1
        fi

  build-production:
    runs-on: windows-latest
    environment: production

    needs: [test-server, test-client]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install Windows dependencies
      run: |
        # Windows dependencies are handled by package managers

    - name: Install deployment dependencies
      run: |
        pip install requests

    - name: Download and bundle Camoufox
      run: |
        python deploy/deploy.py --bundle-camoufox

    - name: Setup server environment
      run: |
        # Create production .env file with secrets
        cd server
        cp .env.example .env
        # Debug: Check if secrets are available
        echo "=== DEBUG: Checking secrets availability ==="
        echo "SUPABASE_URL length: ${#SUPABASE_URL}"
        echo "SUPABASE_KEY length: ${#SUPABASE_KEY}"
        echo "JWT_SECRET length: ${#JWT_SECRET}"
        echo "============================================="
        # Replace with actual production values from secrets using correct placeholders
        # Use a more robust approach to avoid sed issues with special characters
        python -c "
        import os
        # Read the .env file
        with open('.env', 'r') as f:
            content = f.read()
        # Replace placeholders with environment variables
        content = content.replace('https://your-project.supabase.co', os.environ.get('SUPABASE_URL', 'https://placeholder.supabase.co'))
        content = content.replace('your_supabase_anon_key_here', os.environ.get('SUPABASE_KEY', 'placeholder_key'))
        content = content.replace('your_very_secure_jwt_secret_here_at_least_32_characters', os.environ.get('JWT_SECRET', 'placeholder_jwt_secret_32_chars_long'))
        # Write back to .env file
        with open('.env', 'w') as f:
            f.write(content)
        print('Environment file updated successfully')
        "
        # Debug: Show what was actually set (mask sensitive values)
        echo "=== DEBUG: .env file contents (masked) ==="
        sed 's/=.*/=***MASKED***/' .env
        echo "==========================================="
        python ../deploy/scripts/server/setup.py --mode production
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

    - name: Build server executable
      run: |
        python deploy/scripts/server/build.py --package

    - name: Setup client environment
      run: |
        # Create client .env file with environment secrets
        cd client
        echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" > .env
        echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env
        echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
        echo "VITE_WS_URL=${{ secrets.VITE_WS_URL }}" >> .env
        # Debug: Show client env (masked)
        echo "=== DEBUG: Client .env contents (masked) ==="
        sed 's/=.*/=***MASKED***/' .env
        echo "============================================="
        # Install dependencies
        pnpm install
        cd ..
        python deploy/scripts/client/setup.py --check-rust

    - name: Build Tauri app
      run: |
        python deploy/scripts/client/build.py --target tauri --test --package

    - name: Create complete distribution package
      run: |
        python deploy/build.py --target all --distribute

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nyx-app-windows
        path: |
          server/dist/
          client/src-tauri/target/release/bundle/
          dist/
        retention-days: 30
